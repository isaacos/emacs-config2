* keybinding modes
#+BEGIN_SRC emacs-lisp
      (use-package which-key-mode
        :init (which-key-mode)
        (which-key-enable-god-mode-support)
        :diminish which-key-mode
        :config
        (setq which-key-idle-delay 0.3))

      (global-unset-key "\C-d")
      (global-set-key (kbd "C-x m") #'eshell)

      (use-package browse-kill-ring
        :bind (("M-y" . browse-kill-ring)))

      (use-package crux
        :bind (("C-a" . crux-move-beginning-of-line)
               ("C-o" . crux-smart-open-line)
               ("C-S-o" . crux-smart-open-line-above)))

      (use-package selected
        :ensure t
        :commands selected-minor-mode
        :init
        (selected-global-mode)
        (setq selected-org-mode-map (make-sparse-keymap))
        :bind (:map selected-keymap
                    ("C-q" . selected-off)
                    ("u" . upcase-region)
                    ("M-l" . downcase-region)
                    ("C-d C-r" . kill-region)
                    ("C-w" . copy-region-as-kill)
                    ("m" . apply-macro-to-region-lines)
                    ;;("C-S-'" . er/mark-inside-quotes)
                    ;;("C-%" . anzu-isearch-query-replace)
                    :map selected-org-mode-map
                    ("t" . org-table-convert-region)))

      (use-package expand-region
        :bind ("C-=" .  er/expand-region))

      (defun match-paren (arg)
        "Go to the matching paren if on a paren; otherwise insert %."
        (interactive "p")
        (cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
              ((looking-at "\\s)") (forward-char 1) (backward-list 1))
              (t (self-insert-command (or arg 1)))))

      (defun dwim/goto-char (arg char)
        "Move pointer up to and including ARG'th occurrence of CHAR.
            Case is ignored if `case-fold-search' is non-nil in the current buffer.
            Goes backward if ARG is negative; error if CHAR not found."
        (interactive "p\ncchar: ")
        (if (char-table-p translation-table-for-input)
            (setq char (or (aref translation-table-for-input char) char)))
        (progn (search-forward (char-to-string char)
                               nil nil arg) (point)))

      (use-package avy
        :init
        (setq avy-all-windows 'all-frames)
        (setq avy-style 'at-full)
        ;; (setq avy-styles-alist '((avy-goto-char . post)
        ;;                          (avy-goto-line . at-full)
        ;;                          (avy-goto-end-of-line . post)
        ;;                          ))
        (setq avy-keys '(?j ?k ?l ?\; ?n ?i ?o ?s ?d ?f ?g ?h )))

      (use-package anzu
        :ensure t
        :config
        (global-anzu-mode +1))
      (define-key isearch-mode-map [remap isearch-query-replace]  #'anzu-isearch-query-replace)
      (define-key isearch-mode-map [remap isearch-query-replace-regexp] #'anzu-isearch-query-replace-regexp)

      (use-package ace-window
        :ensure t
        :config
        (global-set-key (kbd "C-x o") 'ace-window)
     ;;customize to make face more visible
        (custom-set-faces
    '(aw-leading-char-face
      ((t (:foreground "white" :background "#e52b50" :height 3.0)))))

        ;; (defface aw-leading-char-face
      ;; '((((class color)) (:foreground "white"))
      ;;   (((background dark)) (:foreground "#e52b50"))
      ;;   (((background light)) (:foreground "gray0"))
      ;;   (t (:foreground "gray100" :underline nil)))
      ;; "Face for each window's leading char.")
        (setq aw-keys '(?s ?d ?f ?g ?h ?k ?l)))

      (use-package smartparens
        :ensure t
        :config
        (global-set-key (kbd "C->") #'sp-forward-slurp-sexp)
        (global-set-key (kbd "C-<") #'sp-forward-barf-sexp))

      (use-package hydra
        :ensure t)

      (defun kmacro-toggle-start-end ()
        "Starts kmacro unless one is already in progress than it ends it"
        (interactive)
        (if defining-kbd-macro
            (kmacro-end-macro 1)
          (kmacro-start-macro 0)))


      (defvar isearch-repeat-map
        (let ((map (make-sparse-keymap)))
          (define-key map (kbd "s") #'isearch-repeat-forward)
          (define-key map (kbd "r") #'isearch-repeat-backward)
          map))

      (dolist (cmd '(isearch-repeat-forward isearch-repeat-backward))
        (put cmd 'repeat-map 'isearch-repeat-map))


      (define-key isearch-mode-map (kbd "'") 'isearch-exit)
      (define-key isearch-mode-map (kbd ";") 'avy-isearch)

      (use-package god-mode
        :ensure t
        :config
        (setq god-exempt-major-modes nil)
        (setq god-exempt-predicates nil)
        (global-set-key (kbd "C-x C-1") #'delete-other-windows)
        (global-set-key (kbd "C-x C-2") #'split-window-below)
        (global-set-key (kbd "C-x C-3") #'split-window-right)
        (global-set-key (kbd "C-x C-0") #'delete-window)
        (global-set-key (kbd "C-x C-b") #'switch-to-buffer)
        (define-key god-local-mode-map (kbd "i") #'god-mode-all)
        ;; (define-key god-local-mode-map (kbd "f") #'dwim/goto-char)
        ;;  (define-key god-local-mode-map (kbd "F") #'(lambda (char) (interactive "cchar: ") (dwim/goto-char -1 char)))

        (global-set-key (kbd "C-k") #'kmacro-toggle-start-end)
        (global-set-key (kbd "C-c m") #'imenu)

        (define-key god-local-mode-map (kbd "f") (kbd "C-l"))
        (define-key god-local-mode-map (kbd "h") (kbd "C-b"))
        (define-key god-local-mode-map (kbd "l") (kbd "C-f"))
  
        (define-key god-local-mode-map (kbd "k") (kbd "C-p"))
        (define-key god-local-mode-map (kbd "j") (kbd "C-n"))

        (define-key god-local-mode-map (kbd "%") #'match-paren)

        (define-key god-local-mode-map (kbd "b") #'backward-word)

        (define-key god-local-mode-map (kbd "n") #'fast-nav-mode)

        (define-key god-local-mode-map (kbd "w") #'forward-word)
        (define-key god-local-mode-map (kbd ";") #'avy-goto-char)
        ;;(define-key god-local-mode-map (kbd "p") #'kmacro-toggle-start-end)

        (global-unset-key "\C-d")
        (global-set-key  (kbd "C-d C-d") #'crux-smart-kill-line)
        (define-key god-local-mode-map (kbd "C-d C-l") #'delete-forward-char)
        (define-key god-local-mode-map (kbd "C-d C-h") #'delete-backward-char)
        (define-key god-local-mode-map (kbd "C-d C-s") #'zap-to-char)
        (define-key god-local-mode-map (kbd "C-d C-S-s") #'(lambda (char) (interactive "cZap back to char: ") (zap-to-char -1 char)))


        (require 'god-mode-isearch)
        ;;(define-key isearch-mode-map (kbd "<escape>") #'god-mode-isearch-activate)
        (define-key isearch-mode-map (kbd "C-,") #'god-mode-isearch-activate)
        (define-key god-mode-isearch-map (kbd "C-,") #'god-mode-isearch-disable)
        ;; (define-key god-mode-isearch-map (kbd "<escape>") #'god-mode-isearch-disable)


        (define-key god-local-mode-map (kbd "[") #'backward-paragraph)
        (define-key god-local-mode-map (kbd "]") #'forward-paragraph)
        ;;(global-set-key (kbd "<escape>") #'god-mode-all)
        (define-key input-decode-map [?\C-i] [C-i])
        (global-set-key (kbd "<C-i>") #'god-mode-all)
        (define-key god-local-mode-map (kbd ".") #'repeat))

      (defun my-god-mode-update-nav-state ()
        (if fast-nav-mode (fast-nav-mode -1)))

      (add-hook 'god-mode-disabled-hook #'my-god-mode-update-nav-state)

      ;; must be loaded after god mode to prevent key conflicts
      (define-minor-mode fast-nav-mode
        "Minor mode to rapidly move over large sections of code"
        :lighter "Fast-nav"
        :keymap (let ((map (make-keymap)))
                  (define-key map (kbd "j") 'forward-sexp)
                  (define-key map (kbd "t") 'origami-toggle-node)
                  (define-key map (kbd "T") 'origami-toggle-all-nodes)
                  (define-key map (kbd "k") 'backward-sexp)
                  (define-key map (kbd "d") 'down-list)
                  (define-key map (kbd "u") 'up-list)
                  (define-key map (kbd "m") 'consult-mark)
                  (define-key map (kbd "f") 'forward-paragraph)
                  (define-key map (kbd "b") 'backward-paragraph)
                  (define-key map (kbd "n") 'fast-nav-mode)
                  map))

      (use-package key-chord
        :ensure t
        :init (key-chord-mode 1)
        :config
        (key-chord-define-global "ii" 'god-mode-all)
        (key-chord-define-global "xs" 'save-buffer)
        (key-chord-define god-local-mode-map "jl" 'avy-goto-line)
        (key-chord-define god-local-mode-map "jw" 'ace-window)
        (key-chord-define god-local-mode-map "je" 'avy-goto-end-of-line)
        (key-chord-define god-local-mode-map "jk" 'avy-goto-char-2)
        ;;(key-chord-define isearch-mode-map "jj" #'god-mode-isearch-activate)
        (key-chord-define god-local-mode-map "mm" 'execute-extended-command-for-buffer)
        (key-chord-define god-local-mode-map "xx" 'execute-extended-command))

#+END_SRC

* Defaults
#+BEGIN_SRC emacs-lisp
  (use-package origami
    :ensure t
    :config (global-origami-mode))

  (repeat-mode)

  (use-package super-save
  :ensure t
  :config
  (super-save-mode +1))
#+END_SRC
* appearance
#+BEGIN_SRC emacs-lisp
  ;; sets frame transparency
  ;; (set-frame-parameter (selected-frame) 'alpha '(90 90))
  ;; (add-to-list 'default-frame-alist '(alpha 90 90))
  (menu-bar-mode -1) 

  (use-package solarized-themes
    :config
    (setq solarized-high-contrast-mode-line t))

  (load-theme 'solarized-zenburn :no-confirm)

    (use-package all-the-icons
      :ensure t)

    (use-package doom-modeline
      :ensure t
      :init
      :hook (after-init . doom-modeline-mode)
      :config
      (setq doom-modeline-buffer-encoding nil))

    (use-package rainbow-delimiters
     :ensure t
     :defer t
     :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

* projects
#+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t)
#+END_SRC

* emacs completion frameworks
#+BEGIN_SRC emacs-lisp
    (defun dw/minibuffer-backward-kill (arg)
      "When minibuffer is completing a file name delete up to parent
    folder, otherwise delete a word"
      (interactive "p")
      (if minibuffer-completing-file-name
          ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
          (if (string-match-p "./" (minibuffer-contents))
              (zap-up-to-char (- arg) ?/)
            (delete-minibuffer-contents))
        (delete-backward-char arg)))

  (defvar vertico-repeat-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "j") #'vertico-next)
      (define-key map (kbd "k") #'vertico-previous)
      map))

  (dolist (cmd '(vertico-next vertico-previous))
    (put cmd 'repeat-map 'vertico-repeat-map))

    (use-package vertico
      :ensure t
      :bind (:map vertico-map
             ("C-j" . vertico-next)
             ("C-k" . vertico-previous)
             ("C-f" . vertico-exit)
             :map minibuffer-local-map
             ("DEL" . dw/minibuffer-backward-kill))
      :custom
      (vertico-cycle t)
      :init
      (vertico-mode))

    (use-package orderless
      :ensure t
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))

    (defun dw/get-project-root ()
      (when (fboundp 'projectile-project-root)
        (projectile-project-root)))

    (setq completion-ignore-case  t)

    (setq read-file-name-completion-ignore-case t
          read-buffer-completion-ignore-case t
          completion-ignore-case t)

    (use-package marginalia
      :ensure t
      :config
      (marginalia-mode))
#+END_SRC

* searching
#+BEGIN_SRC emacs-lisp
(use-package consult
  :bind (("C-M-l" . consult-imenu)
     :map isearch-mode-map
     ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
     ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
     ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
     ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch        ("C-M-j" . persp-switch-to-buffer*)
     :map minibuffer-local-map
     ("C-r" . consult-history))
  :custom
  (consult-project-root-function #'dw/get-project-root)
  (completion-in-region-function #'consult-completion-in-region))

#+END_SRC

* notes
#+BEGIN_SRC emacs-lisp
  (use-package denote
    :config
    (setq denote-known-keywords '("code" "history" "current-events"))
    (setq denote-directory (expand-file-name "/home/isaac/denote/"))
    (setq denote-file-type nil))

  (add-hook 'dired-mode-hook #'denote-dired-mode)

  (use-package consult-notes
    ;;:straight ( :type git :host github :repo "mclear-tools/consult-notes")
    :commands (consult-notes consult-notes-search-in-all-notes)
    :config
    (setq consult-notes-file-dir-sources '(("Name"  key  "/home/isaac/denote/")))  ;; Set notes dir(s), see below
    (global-set-key (kbd "C-x C-n") nil)
    (global-set-key (kbd "C-x C-n C-s") #'consult-notes)
      (global-set-key (kbd "C-x C-n C-d") #'denote)
    
    ;; Set org-roam integration OR denote integration, e.g.:
    (when (locate-library "denote")
      (consult-notes-denote-mode)))

#+END_SRC

* Common Lisp
#+BEGIN_SRC emacs-lisp
  (use-package sly)
  ;; (use-package sly
  ;; :straight (:type git :host github :repo "joaotavora/sly")
  ;; :commands (sly sly-connect))

  ;; (setq sly-lisp-implementations '((sbcl ("sbcl" "--core"
  ;;     "sbcl.core-for-sly"))))
#+END_SRC

* Clojure
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :defer t
  :ensure t
  :mode (("\\.clj\\'" . clojure-mode)
         ("\\.edn\\'" . clojure-mode))
  :init
  ;; (add-hook 'clojure-mode-hook #'yas-minor-mode)
  ;; (add-hook 'clojure-mode-hook #'subword-mode)
  ;; (add-hook 'clojure-mode-hook #'eldoc-mode)
  (add-hook 'clojure-mode-hook #'idle-highlight-mode))

(use-package cider
;;   :straight (:type git :host github :repo "clojure-emacs/cider")
  :ensure t
  :defer t
  :init (add-hook 'cider-mode-hook #'clj-refactor-mode)
  :diminish subword-mode
  :config
    (setq nrepl-log-messages t
        cider-repl-display-in-current-window t
        cider-repl-use-clojure-font-lock t
        cider-prompt-save-file-on-load 'always-save
        cider-font-lock-dynamically '(macro core function var)
        nrepl-hide-special-buffers t
        cider-overlays-use-font-lock t)
  (cider-repl-toggle-pretty-printing))
#+END_SRC

* autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 1)
            ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
            ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
            ;; (setq read-extended-command-predicate
            ;;       #'command-completion-default-include-p)
            ;; Enable indentation+completion using the TAB key.
            ;; `completion-at-point' is often bound to M-TAB.
            (setq tab-always-indent 'complete))

  (use-package cape
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file))

  (use-package eglot
    :ensure t
    :commands (eglot eglot-ensure)
    :hook ((clojure-mode . eglot-ensure)
           (js-mode . eglot-ensure)))


  (defvar corfu-repeat-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "j") #'corfu-next)
      (define-key map (kbd "k") #'corfu-previous)
      map))

  (dolist (cmd '(corfu-next corfu-previous))
    (put cmd 'repeat-map 'corfu-repeat-map))

  (use-package corfu
    ;; Optional customizations
     :custom
     (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
     (corfu-auto t)                 ;; Enable auto completion
     (corfu-auto-delay 0)
     (corfu-auto-prefix 1)
     (corfu-separator ?\s)          ;; Orderless field separator
     :config
     (global-corfu-mode)
     :bind
     (:map corfu-map ("C-j" . corfu-next)))
  
#+END_SRC

* org
#+BEGIN_SRC emacs-lisp

  (use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

;; renames buffer when the name starts with title
(defun org+-buffer-name-to-title ()
  "Rename buffer to value of #+title:."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (when (re-search-forward "^[[:space:]]*#\\+TITLE:[[:space:]]*\\(.*?\\)[[:space:]]*$" nil t)
      (rename-buffer (match-string 1)))))

(add-hook 'org-mode-hook #'org+-buffer-name-to-title)

    ;; Turn on indentation and auto-fill mode for Org files
  (defun dw/org-mode-setup ()
    (org-bullets-mode)
    (org-indent-mode)
  ;;  (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    ;; (setq evil-auto-indent nil)
    ;; (company-ispell)

    (add-to-list 'completion-at-point-functions #'cape-ispell)
    (org+-buffer-name-to-title)
    )


  (use-package org
    :defer t
    :hook (org-mode . dw/org-mode-setup)
    :config
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done `time)
    (setq org-log-into-drawer t))
#+END_SRC

* PDF
#+BEGIN_SRC emacs-lisp
  (setq doc-view-continuous t)

    (add-hook 'doc-view-mode-hook
    (lambda ()
     (local-set-key (kbd "n") 'doc-view-scroll-down-or-previous-page)
     (local-set-key (kbd "p") 'doc-view-scroll-up-or-next-page)))


  ;; (use-package pdf-tools
  ;;   :defer t)

  ;; (add-hook 'pdf-view-mode-hook
  ;;           (lambda ()
  ;;             (local-set-key (kbd "n") 'pdf-view-scroll-up-or-next-page)
  ;;             (local-set-key (kbd "p") 'pdf-view-scroll-down-or-previous-page)))
#+END_SRC

* Window Manager
** EXWM
#+BEGIN_SRC emacs-lisp
  ;; (defun efs/exwm-update-class ()
  ;;   (exwm-workspace-rename-buffer exwm-class-name))

  ;; (use-package exwm
  ;;   :config
  ;;   ;; Set the default number of workspaces
  ;;   (setq exwm-workspace-number 5)

  ;;   ;; When window "class" updates, use it to set the buffer name
  ;;   (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

  ;;   ;; Rebind CapsLock to Ctrl
  ;;   (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

  ;;   ;; Set the screen resolution (update this to be the correct resolution for your screen!)
  ;;   (require 'exwm-randr)
  ;;   (exwm-randr-enable)
  ;;   ;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")

  ;;   ;; Load the system tray before exwm-init
  ;;   (require 'exwm-systemtray)
  ;;   (exwm-systemtray-enable)

  ;;   ;; These keys should always pass through to Emacs
  ;;   (setq exwm-input-prefix-keys
  ;;     '(?\C-x
  ;;       ?\C-u
  ;;       ?\C-h
  ;;       ?\M-x
  ;;       ?\M-`
  ;;       ?\M-&
  ;;       ?\M-:
  ;;       ?\C-\M-j  ;; Buffer list
  ;;       ?\C-\ ))  ;; Ctrl+Space

  ;;   ;; Ctrl+Q will enable the next key to be sent directly
  ;;   (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  ;;   ;; Set up global key bindings.  These always work, no matter the input state!
  ;;   ;; Keep in mind that changing this list after EXWM initializes has no effect.
  ;;   (setq exwm-input-global-keys
  ;;         `(
  ;;           ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
  ;;           ([?\s-r] . exwm-reset)

  ;;           ;; Move between windows
  ;;           ([s-left] . windmove-left)
  ;;           ([s-right] . windmove-right)
  ;;           ([s-up] . windmove-up)
  ;;           ([s-down] . windmove-down)

  ;;           ;; Launch applications via shell command
  ;;           ([?\s-&] . (lambda (command)
  ;;                        (interactive (list (read-shell-command "$ ")))
  ;;                        (start-process-shell-command command nil command)))

  ;;           ;; Switch workspace
  ;;           ([?\s-w] . exwm-workspace-switch)
  ;;           ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

  ;;           ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
  ;;           ,@(mapcar (lambda (i)
  ;;                       `(,(kbd (format "s-%d" i)) .
  ;;                         (lambda ()
  ;;                           (interactive)
  ;;                           (exwm-workspace-switch-create ,i))))
  ;;                     (number-sequence 0 9))))

  ;;   (exwm-enable))

#+END_SRC
